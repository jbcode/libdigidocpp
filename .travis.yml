language: c++
matrix:
  include:
#  - os: linux
#    env: TARGET=ubuntu:16.04
#    sudo: false
#  - os: linux
#    env: TARGET=ubuntu:16.10
#    sudo: false
#  - os: linux
#    env: TARGET=32bit/ubuntu:16.04
#    sudo: false
#  - os: osx
#    env: TARGET=osx
#    osx_image: xcode7.3
#  - os: osx
#    env: TARGET=ios
#  - os: osx
#    env: TARGET=simulator
  - os: osx
    env: TARGET=androidarm
  - os: osx
    env: TARGET=androidarm64
  - os: osx
    env: TARGET=androidx86
sudo: required
dist: trusty
osx_image: xcode8.2
services:
- docker
cache: ccache
env:
  global:
  - BUILD_NUMBER=${TRAVIS_BUILD_NUMBER}
  - RUN_TESTS=ALL
  - PATH=${PATH}:$HOME/.local/bin:$HOME/Library/Python/2.7/bin;
  - AWS_DEFAULT_REGION=eu-west-1
  - secure: VTpLjRFkVZeqSiP/tea7b5WiMU+PjQJlpny8/QEYazRNhn/uie69aT8VvEdkpsUM1AEx8yPnNmVGShvoNNaOi/AoqynTIKgeGPCj44h6lCnPpByGVur0avc5WrRj2xBbPBBUw1rsL65wZ13MufmRLUwnmmVYQZ3qDBdpgZvCEhA=

before_install: if [ "${TRAVIS_OS_NAME}" = "osx" ]; then
    rvm get head;
    brew install swig;
    HASH=($(shasum prepare_osx_build_environment.sh));
    pip install --user awscli > /dev/null;
    aws s3 cp s3://open-eid/libdigidocpp-cache/${TARGET}/${HASH}.zip ${HASH}.zip --no-sign-request;
    if [ $? -eq 0 ]; then
      sudo unzip -qq -d /Library ${HASH}.zip;
    else
      ./prepare_osx_build_environment.sh all ${TARGET};
      if [ ${AWS_ACCESS_KEY_ID:+1} ]; then
        cd /Library && zip -q -r $OLDPWD/${HASH}.zip EstonianIDCard* && cd $OLDPWD;
        aws s3 cp ${HASH}.zip s3://open-eid/libdigidocpp-cache/${TARGET}/${HASH}.zip --acl public-read;
      fi
    fi
  fi
script: case ${TARGET} in
  *ios*|*simulator*)
    cd examples/libdigidocpp-ios && ./build-library.sh ${TARGET} && cd ../..;
    ;;
  *android*)
    cd examples/libdigidocpp-android && ./build-library.sh ${TARGET} && cd ../..;
    sudo /Library/EstonianIDCard.${TARGET}/bin/*strip -s /Library/EstonianIDCard.${TARGET}/lib/*.so;
    ;;
  *osx*)
    mkdir build && cd build && cmake -DCMAKE_INSTALL_PREFIX=/Library/EstonianIDCard -DOPENSSL_ROOT_DIR=/Library/EstonianIDCard ..;
    make all zipdebug embedlibs pkgbuild && cd ..;
    ;;
  *)
    docker run -e BUILD_NUMBER=${TRAVIS_BUILD_NUMBER} -e DEBFULLNAME="Travis" -e DEBEMAIL="travis-ci@travis" -v $(pwd):$(pwd) -t "${TARGET}" /bin/bash -c "cd $(pwd);"'
      apt-get update -qq; 
      apt-get install -y dh-make devscripts dpkg-dev cdbs cmake vim-common xsdcxx libxml-security-c-dev libminizip-dev doxygen libboost-test-dev git;
      export VERSION=$(grep project CMakeLists.txt | egrep -o "([0-9]{1,}\.)+[0-9]{1,}").${BUILD_NUMBER};
      dh_make --createorig --addmissing --defaultless -y -p libdigidocpp_${VERSION};
      dch --distribution $(lsb_release -cs) -v ${VERSION} "Release ${VERSION}.";
      dpkg-buildpackage -rfakeroot -us -uc;
      git clean -dxf';
  esac

addons:
  coverity_scan:
    project:
      name: jbcode/libdigidocpp
    notification_email: juozas.bitkevicius@gmail.com.ee
    build_command_prepend: mkdir coverity; cd coverity; cmake ..
    build_command: make
    branch_pattern: coverity_scan

before_deploy:
- export VERSION=${TRAVIS_TAG:1}
- git clean -dfx
- cd ..
- mv libdigidocpp libdigidocpp-${VERSION}
- tar czf libdigidocpp-${VERSION}.tar.gz libdigidocpp-${VERSION}
deploy:
  provider: releases
  api_key: 4ea95b8e0ecc0dad29b76830ebe0b9a189c3463b
  file: libdigidocpp-${VERSION}.tar.gz
  skip_cleanup: true
  on:
    tags: true
